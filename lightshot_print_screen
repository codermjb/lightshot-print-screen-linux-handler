#!/bin/sh

# treat unset variables as an error when substituting
set -o nounset

#------------------------------------------------------------------------------

# these constants aim on fast script identification
readonly script_name_executable=$(basename "${0}")
readonly script_name_human_friendly='Lightshot Print Screen key Linux handler'
readonly script_version='1.0'
readonly script_github_url='https://git.io/fx2US'

#------------------------------------------------------------------------------

# global hotkey variable for easy set-up
# overridable with -k switch given to the script
# set this to the same hotkey which you have set up in your Lightshot options
# example: for the left control key and the print screen key, type "Control_L+Print"
hotkey='Print'

#------------------------------------------------------------------------------

print_error_and_exit()
# expected arguments:
# $1 = error origin
# $2 = error message
{
    # redirect all output from this function to standard error stream
    exec 1>&2

    # check if exactly 2 arguments have been passed
    # if not, print out an input check error without colors
    if [ "${#}" -ne 2 ]
    then
        # $1 and $2 are to be shown literally in this message
        # link to wiki: https://github.com/koalaman/shellcheck/wiki/SC2016
        # shellcheck disable=SC2016
        printf 'print_error_and_exit() input check\n\n\tWrong number of arguments has been passed: %s!\n\tExpected the following 2:\n\t\t$1 - error origin\n\t\t$2 - error message\n' "${#}"
        exit 1
    fi

    if command -v tput > /dev/null 2>&1 &&
       tput bold > /dev/null 2>&1 &&
       tput setaf 1 > /dev/null 2>&1
    then
        # color definitions
        readonly bold_yellow=$(tput bold)$(tput setaf 3)
        readonly bold_red=$(tput bold)$(tput setaf 1)
        readonly reset_color=$(tput sgr0)
        # here we have color support, so we make:
        # - error origin in yellow color
        # - error message in default color
        # - error statement in red color
        printf '%s\n\n\t%b\n\n%s\n' \
            "${bold_yellow}${1}${reset_color}" \
            "${2}" \
            "${bold_red}An error occurred, see above.${reset_color}"
    else
        # here we do not have color support
        printf '%s\n\n\t%b\n\n%s\n' \
            "${1}" \
            "${2}" \
            "An error occurred, see above."
    fi

    # always exit the script with the usual exit code 1
    exit 1
}

#------------------------------------------------------------------------------

# do not warn that no caller passes arguments - that is the point of the test
# link to wiki: https://github.com/koalaman/shellcheck/wiki/SC2120
# shellcheck disable=SC2120
am_i_root()
# expected arguments: none
{
    # check if no argument has been passed
    [ "${#}" -eq 0 ] || print_error_and_exit "am_i_root() input check" "Some arguments have been passed to the function!\\n\\tNo arguments expected.\\n\\tPassed: ${*}"

    # check if the user is root
    # this returns an exit code of the command directly
    [ "$(id -u)" -eq 0 ]
}

# check if the user had by any chance run the script with root privileges
# the reason is, this script should under no circumstances be run as root
# in this function call, the SC2119 information is irrelevant and safe to ignore
# link to wiki: https://github.com/koalaman/shellcheck/wiki/SC2119
# shellcheck disable=SC2119
am_i_root && print_error_and_exit "am_i_root() function call" "Running this script with root privileges is not allowed!"

#------------------------------------------------------------------------------

check_for_prerequisites()
# expected arguments:
# any number of program names; at least one
{
    # check if no argument has been passed
    [ "${#}" -eq 0 ] && print_error_and_exit "check_for_prerequisites() input check" "No arguments have been passed to the function!\\n\\tAt least one program name expected."

    # iterate through the given arguments
    while [ "${#}" -gt 0 ]
    do
        # check if the argument is a program which is installed
        command -v "${1}" > /dev/null 2>&1 || print_error_and_exit "check_for_prerequisites() runtime" "This script requires '${1}' but it is not available on this system!\\n\\tPlease install the corresponding package manually."
        # move to the next argument
        shift
    done
}

check_for_prerequisites xdotool pgrep

#------------------------------------------------------------------------------

is_number()
# expected arguments:
# $1 = variable or literal
{
    # check if exactly one argument has been passed
    [ "${#}" -eq 1 ] || print_error_and_exit "is_number() input check" "Exactly one argument has not been passed to the function!\\n\\tOne variable or literal to test expected.\\n\\tPassed: ${*}"

    # check if the argument is an integer number
    # this will return an exit code of the command itself directly
    [ "${1}" -eq "${1}" ] 2> /dev/null
}

#------------------------------------------------------------------------------

print_usage_and_exit()
# expected arguments:
# $1 = exit code
{
    # check if exactly one argument has been passed
    [ "${#}" -eq 1 ] || print_error_and_exit "print_usage_and_exit() input check" "Exactly one argument has not been passed to the function!\\n\\tPassed: ${*}"

    # check if the argument is a number
    is_number "${1}" || print_error_and_exit "print_usage_and_exit() input check" "The argument is not a number!\\n\\tExpected an exit code from the script.\\n\\tPassed: ${1}"

    # in case of non-zero exit code given, redirect all output to stderr
    [ "${1}" -ne 0 ] && exec 1>&2

    printf 'Script  : %s\n' "${script_name_human_friendly}"
    printf 'Version : %s\n' "${script_version}"
    printf 'GitHub  : %s\n' "${script_github_url}"
    printf '%70s\n\n' '' | tr ' ' '-'
    printf 'Usage: %s [-k "HotKey"]\n\n' "${script_name_executable}"
    printf '   -k "HotKey": Optional switch requiring one argument,\n'
    printf '\t\twhich is the print screen hotkey combination.\n\n'
    printf '\t\tFor the left Control key and the Print Screen key:\n'
    printf '\t\t"Control_L+Print"\n'

    exit "${1}"
}

#------------------------------------------------------------------------------

# process arguments given to the script
while getopts ":hk:" option
do
    case "${option}" in
        k)
            hotkey=${OPTARG}
            ;;
        h)
            print_usage_and_exit 0
            ;;
        *)
            print_usage_and_exit 1
            ;;
    esac
done
shift $(( OPTIND - 1 ))

#------------------------------------------------------------------------------

get_process_id()
# expected arguments:
# $1 = process name
{
    # check if exactly one argument has been passed
    [ "${#}" -eq 1 ] || print_error_and_exit "get_process_id() input check" "Exactly one argument has not been passed to the function!\\n\\tPassed: ${*}"

    # check if the argument is an empty string
    [ -n "${1}" ] || print_error_and_exit "get_process_id() input check" "The argument is an empty string!\\n\\tExpected a process name."

    # try to get the process id using the process name
    pgrep "${1}" | head -n 1
}

#------------------------------------------------------------------------------

get_window_id()
# expected arguments:
# $1 = process id
# $2 = window name
{
    # check if exactly two arguments have been passed
    [ "${#}" -eq 2 ] || print_error_and_exit "get_window_id() input check" "Exactly two arguments have not been passed to the function!\\n\\tExpected a process id and a window name.\\n\\tPassed: ${*}"

    # check if the first argument is a number
    is_number "${1}" || print_error_and_exit "get_window_id() input check" "The first argument is not a number!\\n\\tExpected a process id.\\n\\tPassed: ${1}"

    [ -n "${2}" ] || print_error_and_exit "get_window_id() input check" "The second argument is an empty string!\\n\\tExpected a window name."

    # try to get the window id using the process id and the window name
        #--all   : Require that all conditions be met.
        #--limit : Stop searching after finding N matching windows.
        #--pid   : Match windows that belong to a specific process id.
        #--name  : Match against the window name. This is the same string that is displayed in the window titlebar.
    xdotool search --all --limit 1 --pid "${1}" --name "${2}" || print_error_and_exit "get_window_id() runtime" "No window matching process id '${1}' and window name '${2}' has been found."
}

#------------------------------------------------------------------------------

# here comes the core part,
# an actual use of the above generic functions

# try to get the Lightshot window id
lightshot_window_id=$(get_window_id "$(get_process_id Lightshot.exe)" Lightshot) || print_error_and_exit "CRITICAL ERROR" "Lightshot.exe process is probably not running."

# simulate the pre-defined print screen hotkey on the Lightshot window
xdotool key --window "${lightshot_window_id}" "${hotkey}"
