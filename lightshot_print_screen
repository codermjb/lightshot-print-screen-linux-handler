#!/bin/sh

#―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――#
#                    Lightshot print screen Linux handler                     #
#                         Portable POSIX shell script                         #
#                    Copyright: 2018-2020 Vlastimil Burian                    #
#                       E-mail: info@vlastimilburian.cz                       #
#                              License: GPL v3.0                              #
#                                Revision: 3.0                                #
#                        GitHub: https://git.io/fx2US                         #
#―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――#

# global shell script variables
# hotkey variable for easy set-up; overridable with -k switch
# set this to the same hotkey which you have set up in your Lightshot options
# for the left control key and the print screen key put Control_L+Print in
hotkey=Print

# global shell script options
# treat unset variables as an error when substituting
# clarification: this means that accessing so far undeclared variable
# produces immediate termination of the script with an error produced:
# line number + message: "unbound variable" or "parameter not set"
set -o nounset

tput_colors_supported ()
{
    command -v tput && tput bold && tput setaf 1 && [ "$(tput colors)" -ge 8 ]
} > /dev/null 2>&1

if tput_colors_supported; then
    # shellcheck disable=SC2034
    color_reset=$(tput sgr0)
    # shellcheck disable=SC2034
    bold_text=$(tput bold)
    # shellcheck disable=SC2034
    color_red=$bold_text$(tput setaf 1)
    # shellcheck disable=SC2034
    color_green=$bold_text$(tput setaf 2)
    # shellcheck disable=SC2034
    color_yellow=$bold_text$(tput setaf 3)
    # shellcheck disable=SC2034
    color_blue=$bold_text$(tput setaf 4)
    # shellcheck disable=SC2034
    color_magenta=$bold_text$(tput setaf 5)
    # shellcheck disable=SC2034
    color_cyan=$bold_text$(tput setaf 6)
    # shellcheck disable=SC2034
    color_white=$bold_text$(tput setaf 7)
else
    # shellcheck disable=SC2034
    color_reset=
    # shellcheck disable=SC2034
    bold_text=
    # shellcheck disable=SC2034
    color_red=
    # shellcheck disable=SC2034
    color_green=
    # shellcheck disable=SC2034
    color_yellow=
    # shellcheck disable=SC2034
    color_blue=
    # shellcheck disable=SC2034
    color_cyan=
    # shellcheck disable=SC2034
    color_white=
fi

dump_arguments ()
{
    punct=.; ${1+false} || { punct=:; i=1; }
    printf '%s\n' \
        "${color_yellow}dump_arguments()$color_reset" \
        "$# arguments are being inspected$punct"
    while [ $# -gt 0 ]; do
        printf "[%d]: '%s'" "$i" "$1"
        [ -z "$1" ] && printf ' (empty)'
        [ "$1" -eq "$1" ] 2> /dev/null && printf ' (integer)'
        printf '\n'
        shift
        i=$((i+1))
    done
} >&2

print_error ()
{
    if ! { [ $# -eq 2 ] && [ -n "$1" ] && [ -n "$2" ]; }; then
        dump_arguments "$@"
        # shellcheck disable=SC2016
        printf '%b\n' \
            "\n${color_yellow}nprint_error() input check$color_reset" \
            'Wrong number or empty arguments have been passed to the function.' \
            'Expected the following strings: $1 = error heading, $2 = error message.'
        exit 1
    fi
    printf '%b\n' \
        "${color_red}Error occurred$color_reset" \
        "Error heading: $color_yellow$1$color_reset" \
        "Error message: $2"
        
} >&2

print_error__exit ()
{
    if ! { [ $# -eq 2 ] && [ -n "$1" ] && [ -n "$2" ]; } &&
       ! { [ $# -eq 3 ] && [ -n "$1" ] && [ -n "$2" ] && [ -n "$3" ] && [ "$3" -eq "$3" ] 2> /dev/null; }; then
        dump_arguments "$@"
        # shellcheck disable=SC2016
        printf '%b\n' \
            "\n${color_yellow}print_error__exit() input check$color_reset" \
            'Wrong number, type or empty arguments have been passed to the function.' \
            'Expected the following strings: $1 = error heading, $2 = error message.' \
            'Optionally, accepting a number: $3 = exit code; if not given 1 is used.'
        exit 1
    fi
    [ $# -eq 3 ] && exit_code=$3 || exit_code=1
    print_error "$1" "$2"
    exit "$exit_code"
} >&2

check_for_requirements ()
{
    if [ $# -eq 0 ]; then
        print_error__exit 'check_for_requirements() input check' "No arguments passed to the function! At least one program name expected."
    fi
    while [ $# -gt 0 ]; do
        if [ -z "$1" ]; then
            dump_arguments "$@"
            print_error__exit 'check_for_requirements() input check' "Empty argument passed to the function!"
        fi
        if ! command -v "$1" > /dev/null 2>&1; then
            print_error__exit 'check_for_requirements()' "This script requires '$1' but it is not available on this system! Please install the corresponding package manually."
        fi
        shift
    done
}

check_for_requirements xdotool pgrep

is_integer ()
{
    if ! { [ $# -eq 1 ] && [ -n "$1" ]; }; then
        dump_arguments "$@"
        print_error__exit 'is_integer() input check' "Exactly one non-empty argument was not passed to the function! One variable or literal to test expected."
    fi
    [ "$1" -eq "$1" ] 2> /dev/null
}

print_usage_and_exit ()
{
    if ! { [ $# -eq 1 ] && [ -n "$1" ] && is_integer "$1"; }; then
        dump_arguments "$@"
        print_error__exit 'print_usage_and_exit() input check' "Exactly one argument as a number was not passed to the function! Expected an exit code from the script."
    fi
    [ "$1" -ne 0 ] && exec >&2
cat << EOF
Script  : Lightshot print screen Linux handler
Version : 3.0
GitHub  : https://git.io/fx2US
-------------------------------------------------------------------
Description: This script works with XDOTOOL to trigger Print Screen
key combination in Lightshot application installed on Linux in Wine
-------------------------------------------------------------------
Usage: ./$(basename "$0") [-k "HotKey"]

    -k "HotKey": Optional switch requiring one argument,
        which is the print screen hotkey combination.
        For the left Control key and the Print Screen key
        that would be "Control_L+Print" (as an example).

    -h: Show this help.
EOF
    exit "$1"
}

while getopts ":hk:" cli_option; do
    case "$cli_option" in
        (k) hotkey=$OPTARG        ; break ;;
        (h) print_usage_and_exit 0; break ;;
        (*) print_usage_and_exit 1; break ;;
    esac
done
shift $((OPTIND - 1))

get_process_id ()
{
    if ! { [ $# -eq 1 ] && [ -n "$1" ]; }; then
        dump_arguments "$@"
        print_error__exit 'get_process_id() input check' "Exactly one non-empty argument was not passed to the function! Expected a process name."
    fi
    pgrep "$1" | head -1
}

get_window_id ()
{
    if ! { [ $# -eq 2 ] && [ -n "$1" ] && is_integer "$1" && [ -n "$2" ]; }; then
        dump_arguments "$@"
        print_error__exit 'get_window_id() input check' "Exactly two non-empty arguments were not passed to the function! Expected a process id (integer) and a window name (string)."
    fi
    #--all  : Require all conditions to be met.
    #--limit: Stop searching after finding N matching windows.
    #--pid  : Match windows that belong to a specific process id.
    #--name : Match against the window name. This is the same string that is displayed in the window titlebar.
    if ! xdotool search --all --limit 1 --pid "$1" --name "$2"; then
        print_error__exit 'get_window_id()' "No window matching process id '$1' and window name '$2' has been found."
    fi
}

lightshot_process_id=$(get_process_id Lightshot.exe)

if ! { [ -n "$lightshot_process_id" ] && is_integer "$lightshot_process_id"; }; then
    # shellcheck disable=SC2016
    print_error__exit 'is_integer $lightshot_process_id' "Lightshot process was not found / is not running."
fi

lightshot_window_id=$(get_window_id "$lightshot_process_id" Lightshot)

if ! { [ -n "$lightshot_window_id" ] && is_integer "$lightshot_window_id"; }; then
    # shellcheck disable=SC2016
    print_error__exit 'is_integer $lightshot_window_id' "Lightshot process was found / is running but its window was not found for some reason."
fi

xdotool key --window "$lightshot_window_id" "$hotkey"
